{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"Snowman: Python Model and Query Builder for     Snowflake <p>Snowman is a Python library that provides a way to extract Snowflake table information in a type-safe.</p> <p>Snowman provides two main features:</p> <ul> <li>Automatically generate Pydantic models from Snowflake information schemas</li> <li>Query builder to generate SQL queries in a type-safe</li> </ul> Generated Pydantic Model Query Builder INSERTUPDATEDELETETRUNCATE <p>Example</p> <pre><code>from snowman.query import insert\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    insert.into(User).values(\n        User(\n            id=1,\n            name=\"John Doe\",\n        ),\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import update\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    update(User).set(\n        {\"name\": \"Jane Doe\"},\n    ).where(\n        \"id = %s\",\n        [1],\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import delete\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    delete.from_(User).where(\n        \"id = %s\",\n        [1],\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import truncate\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    truncate.if_.exists.table(User).execute(cursor)\n</code></pre>"},{"location":"#source-snowflake","title":"Source: Snowflake","text":"<pre><code>CREATE TABLE DATABASE.SCHEMA.USER (\n    ID INTEGER NOT NULL COMMENT 'User ID',\n    NAME TEXT NOT NULL COMMENT 'User Name',\n    AGE INTEGER DEFAULT NULL COMMENT 'User Age',\n    CREATED_AT TIMESTAMP_TZ NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'Created At'\n) COMMENT 'User Table';\n</code></pre>"},{"location":"#output-python-code","title":"Output: Python Code","text":"<pre><code>#\n# Code generated by snowman; DO NOT EDIT.\n#\n# For more information about snowman,\n# please refer to https://github.com/yassun7010/snowman-py .\n#\n\nimport datetime\nimport typing\n\nimport pydantic\nimport snowman\n\nif typing.TYPE_CHECKING:\n\n    class _UserInsertTypedDict(typing.TypedDict):\n        id: snowman.datatype.INTEGER\n        \"\"\"User ID\"\"\"\n\n        name: snowman.datatype.TEXT\n        \"\"\"User Name\"\"\"\n\n        age: typing.NotRequired[snowman.datatype.INTEGER | None]\n        \"\"\"User Age\"\"\"\n\n        created_at: typing.NotRequired[snowman.datatype.TIMESTAMP_TZ]\n        \"\"\"Created At\"\"\"\n\n    class _UserUpdateTypedDict(typing.TypedDict):\n        id: typing.NotRequired[snowman.datatype.INTEGER]\n        \"\"\"User ID\"\"\"\n\n        name: typing.NotRequired[snowman.datatype.TEXT]\n        \"\"\"User Name\"\"\"\n\n        age: typing.NotRequired[snowman.datatype.INTEGER | None]\n        \"\"\"User Age\"\"\"\n\n        created_at: typing.NotRequired[snowman.datatype.TIMESTAMP_TZ]\n        \"\"\"Created At\"\"\"\n\n\n# TABLE: DATABASE.SCHEMA.USER\n@snowman.table(\"DATABASE\", \"SCHEMA\", \"USER\")\nclass User(\n    pydantic.BaseModel, snowman.Table[\"_UserInsertTypedDict\", \"_UserUpdateTypedDict\"]\n):\n    \"\"\"User Table\"\"\"\n\n    model_config = pydantic.ConfigDict(populate_by_name=True)\n\n    id: typing.Annotated[\n        snowman.datatype.INTEGER, pydantic.Field(title=\"User ID\", alias=\"ID\")\n    ]\n    \"\"\"User ID\"\"\"\n\n    name: typing.Annotated[\n        snowman.datatype.TEXT, pydantic.Field(title=\"User Name\", alias=\"NAME\")\n    ]\n    \"\"\"User Name\"\"\"\n\n    age: typing.Annotated[\n        snowman.datatype.INTEGER | None, pydantic.Field(title=\"User Age\", alias=\"AGE\")\n    ] = None\n    \"\"\"User Age\"\"\"\n\n    created_at: typing.Annotated[\n        snowman.datatype.TIMESTAMP_TZ,\n        pydantic.Field(title=\"Created At\", alias=\"CREATED_AT\"),\n    ] = snowman.pydantic.DefaultFactory(datetime.datetime.now)\n    \"\"\"Created At\"\"\"\n</code></pre>"},{"location":"guide/installation/","title":"Installation","text":"<p>Snowman can be installed using <code>pip</code>.</p> <p>To install Snowman, run the following command:</p> <pre><code>pip install snowman-py\n</code></pre>"},{"location":"guide/query_builder/","title":"Query Builder","text":"<p>Snowman provides a query builder that maintains the syntax of SQL. You can generate <code>INSERT</code> / <code>UPDATE</code> / <code>DELETE</code> / <code>TRUNCATE</code> queries, but it does not currently support complex query syntax like <code>SELECT</code>.</p> <p>Tip</p> <p>The query builder is based on simple rules.</p> <ul> <li>SQL reserved words can be written in a way that can be accessed like properties with a dot <code>.</code></li> <li>If a SQL reserved word matches a Python reserved word, an underscore <code>_</code> is added to the end of the property name</li> </ul> <p>If you know <code>SQL</code>, you can build Snowman queries with a fluent python coding !! \ud83d\ude80</p> <p>Note</p> <p>The paramstyle used by Snowman is <code>format</code>. The reason for not supporting <code>pyformat</code> is to avoid key duplication when complex query patterns occur.</p> <p>In other words, it uses <code>%s</code> to embed parameters, not <code>%(name)s</code>.</p>"},{"location":"guide/query_builder/#insert-query","title":"Insert Query","text":"ExecuteBuildExecute Many <p>Example</p> <pre><code>from snowman.query import insert\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    insert.into(User).values(\n        User(\n            id=1,\n            name=\"John Doe\",\n        ),\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>import textwrap\n\nfrom snowman.query import insert\nfrom your.database.schema import User\n\nquery, params = (\n    insert.into(\n        User,\n    ).values(\n        User(\n            id=1,\n            name=\"John Doe\",\n        ),\n    )\n).build()\n\nexpected = textwrap.dedent(\n    \"\"\"\n    INSERT INTO\n        database.schema.users\n    (\n        id,\n        name\n    )\n    VALUES (\n        %s,\n        %s\n    )\n    \"\"\",\n).strip()\n\nassert query == expected\nassert params == (1, \"John Doe\")\n</code></pre> <p>Example</p> <pre><code>from snowman.query import insert\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    insert.into(User).values(\n        [\n            User(\n                id=1,\n                name=\"John Doe\",\n            ),\n            User(\n                id=2,\n                name=\"Alice Smith\",\n            ),\n        ],\n    ).execute(cursor)\n</code></pre>"},{"location":"guide/query_builder/#update-query","title":"Update Query","text":"ExecuteBuild <p>Example</p> <pre><code>from snowman.query import update\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    update(User).set(\n        {\"name\": \"Jane Doe\"},\n    ).where(\n        \"id = %s\",\n        [1],\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>import textwrap\n\nfrom snowman.query import update\nfrom your.database.schema import User\n\nquery, params = (\n    update(\n        User,\n    )\n    .set(\n        {\"name\": \"Jane Doe\"},\n    )\n    .where(\"id = %s\", [1])\n).build()\n\nexpected = textwrap.dedent(\n    \"\"\"\n    UPDATE\n        database.schema.users\n    SET\n        name = %s\n    WHERE\n        id = %s\n    \"\"\",\n).strip()\n\nassert query == expected\nassert params == (\"Jane Doe\", 1)\n</code></pre>"},{"location":"guide/query_builder/#delete-query","title":"Delete Query","text":"ExecuteBuild <p>Example</p> <pre><code>from snowman.query import delete\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    delete.from_(User).where(\n        \"id = %s\",\n        [1],\n    ).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>import textwrap\n\nfrom snowman.query import delete\nfrom your.database.schema import User\n\nquery, params = (\n    delete.from_(\n        User,\n    ).where(\n        \"id = %s\",\n        [1],\n    )\n).build()\n\nexpected = textwrap.dedent(\n    \"\"\"\n    DELETE FROM\n        database.schema.users\n    WHERE\n        id = %s\n    \"\"\",\n).strip()\n\nassert query == expected\nassert params == (1,)\n</code></pre>"},{"location":"guide/query_builder/#truncate-query","title":"Truncate Query","text":"ExecuteBuild <p>Example</p> <pre><code>from snowman.query import truncate\nfrom your.database.schema import User\nfrom your.snowflake import snowflake_conn\n\nwith snowflake_conn.cursor() as cursor:\n    truncate.if_.exists.table(User).execute(cursor)\n</code></pre> <p>Example</p> <pre><code>from snowman.query import truncate\nfrom your.database.schema import User\n\nquery, params = truncate.if_.exists.table(User).build()\n\nexpected = \"TRUNCATE IF EXISTS TABLE database.schema.users\"\n\nassert query == expected\nassert params == ()\n</code></pre>"},{"location":"guide/cli_tool/","title":"CLI Tool","text":"<p>The <code>snowman</code> command is provided to assist in the integration between Snowflake and Python.</p>"},{"location":"guide/cli_tool/#initialization","title":"Initialization","text":""},{"location":"guide/cli_tool/#snowman-init","title":"<code>$ snowman init</code>","text":"<p>Initialize Snowman configuration. For more information on configuration items, please read Configuration.</p> <p>Tip</p> <p>Initialize the <code>snowman.toml</code> file or set <code>[tool.snowman]</code> in <code>pyproject.toml</code> with the <code>--file</code> option. By default, the <code>pyproject.toml</code> file is created.</p> <p>Example</p> <pre><code>snowman init\n</code></pre>"},{"location":"guide/cli_tool/#python-model-generator","title":"Python Model Generator","text":""},{"location":"guide/cli_tool/#snowman-model-generate","title":"<code>$ snowman model generate</code>","text":"<p>Automatically generate Pydantic models from Snowflake information schemas.</p> <p>Example</p> <pre><code>snowman model generate\n</code></pre> Generated Code"},{"location":"guide/cli_tool/#source-snowflake","title":"Source: Snowflake","text":"<pre><code>CREATE TABLE DATABASE.SCHEMA.USER (\n    ID INTEGER NOT NULL COMMENT 'User ID',\n    NAME TEXT NOT NULL COMMENT 'User Name',\n    AGE INTEGER DEFAULT NULL COMMENT 'User Age',\n    CREATED_AT TIMESTAMP_TZ NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'Created At'\n) COMMENT 'User Table';\n</code></pre>"},{"location":"guide/cli_tool/#output-python-code","title":"Output: Python Code","text":"<pre><code>#\n# Code generated by snowman; DO NOT EDIT.\n#\n# For more information about snowman,\n# please refer to https://github.com/yassun7010/snowman-py .\n#\n\nimport datetime\nimport typing\n\nimport pydantic\nimport snowman\n\nif typing.TYPE_CHECKING:\n\n    class _UserInsertTypedDict(typing.TypedDict):\n        id: snowman.datatype.INTEGER\n        \"\"\"User ID\"\"\"\n\n        name: snowman.datatype.TEXT\n        \"\"\"User Name\"\"\"\n\n        age: typing.NotRequired[snowman.datatype.INTEGER | None]\n        \"\"\"User Age\"\"\"\n\n        created_at: typing.NotRequired[snowman.datatype.TIMESTAMP_TZ]\n        \"\"\"Created At\"\"\"\n\n    class _UserUpdateTypedDict(typing.TypedDict):\n        id: typing.NotRequired[snowman.datatype.INTEGER]\n        \"\"\"User ID\"\"\"\n\n        name: typing.NotRequired[snowman.datatype.TEXT]\n        \"\"\"User Name\"\"\"\n\n        age: typing.NotRequired[snowman.datatype.INTEGER | None]\n        \"\"\"User Age\"\"\"\n\n        created_at: typing.NotRequired[snowman.datatype.TIMESTAMP_TZ]\n        \"\"\"Created At\"\"\"\n\n\n# TABLE: DATABASE.SCHEMA.USER\n@snowman.table(\"DATABASE\", \"SCHEMA\", \"USER\")\nclass User(\n    pydantic.BaseModel, snowman.Table[\"_UserInsertTypedDict\", \"_UserUpdateTypedDict\"]\n):\n    \"\"\"User Table\"\"\"\n\n    model_config = pydantic.ConfigDict(populate_by_name=True)\n\n    id: typing.Annotated[\n        snowman.datatype.INTEGER, pydantic.Field(title=\"User ID\", alias=\"ID\")\n    ]\n    \"\"\"User ID\"\"\"\n\n    name: typing.Annotated[\n        snowman.datatype.TEXT, pydantic.Field(title=\"User Name\", alias=\"NAME\")\n    ]\n    \"\"\"User Name\"\"\"\n\n    age: typing.Annotated[\n        snowman.datatype.INTEGER | None, pydantic.Field(title=\"User Age\", alias=\"AGE\")\n    ] = None\n    \"\"\"User Age\"\"\"\n\n    created_at: typing.Annotated[\n        snowman.datatype.TIMESTAMP_TZ,\n        pydantic.Field(title=\"Created At\", alias=\"CREATED_AT\"),\n    ] = snowman.pydantic.DefaultFactory(datetime.datetime.now)\n    \"\"\"Created At\"\"\"\n</code></pre>"},{"location":"guide/cli_tool/#snowman-model-diff","title":"<code>$ snowman model diff</code>","text":"<p>Check differences between Python models and Snowflake information schemas.</p> <p>Example</p> <pre><code>snowman model diff --check\n</code></pre>"},{"location":"guide/cli_tool/configuration/","title":"Configuration","text":"<p>This section describes how to customize the behavior of the <code>snowman</code> command.</p> <p>The configuration written in <code>snowman.toml</code> or <code>[tool.snowman]</code> of <code>pyproject.toml</code> are loaded. Instructions by command arguments have higher priority than the configuration file, and it is possible to override the configuration specified in the configuration file.</p>"},{"location":"guide/cli_tool/configuration/#connection","title":"<code>connection</code>","text":"<p>Set the connection information to Snowflake. Each setting item can be specified directly from the configuration file, or you can specify the environment variable name in the <code>env</code> property to get the value from the environment variable.</p> <p>Example</p> <pre><code>[connection]\naccount = { env = \"SNOWFLAKE_ACCOUNT\" }\nuser = { env = \"SNOWFLAKE_USER\" }\npassword = { env = \"SNOWFLAKE_PASSWORD\" }\nrole = \"DEVELOPER\"\ndatabase = \"MY_DB\"\nschema = \"PUBLIC\"\nwarehouse = \"XSMALL\"\n</code></pre>"},{"location":"guide/cli_tool/configuration/#model","title":"<code>model</code>","text":""},{"location":"guide/cli_tool/configuration/#output_dir","title":"<code>output_dir</code>","text":"<p>Specify the output directory of the Pydantic models generated from the Snowflake information schema.</p> <p>Example</p> <pre><code>[model]\noutput_dir = \"src/models\"\n</code></pre>"},{"location":"guide/cli_tool/configuration/#include_databases","title":"<code>include_databases</code>","text":"<p>Specify the database names that are the target of model generation. It cannot be used in conjunction with <code>[model.exclude_databases]</code>.</p> <p>Example</p> <pre><code>[model]\ninclude_databases = [\"MY_DB\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#exclude_datebases","title":"<code>exclude_datebases</code>","text":"<p>Specify the database names that are not the target of model generation. It cannot be used in conjunction with <code>[model.include_databases]</code>.</p> <p>Example</p> <pre><code>[model]\nexclude_databases = [\"INFORMATION_SCHEMA\", \"MIGRATION\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#include_schemas","title":"<code>include_schemas</code>","text":"<p>Specify the schema names that are the target of model generation. It cannot be used in conjunction with <code>[model.database.*.exclude_schemas]</code>.</p> <p>Example</p> <pre><code>[model.database.MY_DB]\ninclude_schemas = [\"PUBLIC\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#exclude_schemas","title":"<code>exclude_schemas</code>","text":"<p>Specify the schema names that are not the target of model generation. It cannot be used in conjunction with <code>[model.database.*.include_schemas]</code>.</p> <p>Example</p> <pre><code>[model.database.MY_DB]\nexclude_schemas = [\"SANDBOX\"]\n</code></pre>"},{"location":"guide/cli_tool/configuration/#pydantic","title":"<code>pydantic</code>","text":"<p>Configure the Pydantic models to be generated.</p>"},{"location":"guide/cli_tool/configuration/#model_name_prefix","title":"<code>model_name_prefix</code>","text":"<p>Specify the prefix of the Pydantic model name.</p> <p>Example</p> <pre><code>[pydantic]\nmodel_name_prefix = \"Model\"\n</code></pre> <p>The following conversion is performed:</p> <p><code>database.schema.User</code> -&gt; <code>database.schema.ModelUser</code></p>"},{"location":"guide/cli_tool/configuration/#model_name_suffix","title":"<code>model_name_suffix</code>","text":"<p>Specify the suffix of the Pydantic model name.</p> <p>Example</p> <pre><code>[pydantic]\nmodel_name_suffix = \"Model\"\n</code></pre> <p>The following conversion is performed:</p> <p><code>database.schema.User</code> -&gt; <code>database.schema.UserModel</code></p>"}]}